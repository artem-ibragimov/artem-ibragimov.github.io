'use strict';

function drawEntity(context, { image, coords, }, size = 22, color = 'white') {
    context.fillStyle = color;
    context.font = `${size}px serif`;
    context.fillText(image, coords.x, coords.y);
}

const coordsMatch = (p1, p2) => p1.x === p2.x && p1.y === p2.y;
const randomCoords = (max) => ({
    x: (1 - Math.random()) * max,
    y: (1 - Math.random()) * max
});

class Entity {
    constructor(coords = { x: 0, y: 0 }) {
        this.coords = coords;
    }
    tick() { }
}

class BaseAnimal extends Entity {
    constructor() {
        super(...arguments);
        /** px per tick */
        this.speed = 1;
        this.destination = this.coords;
    }
    tick() {
        if (coordsMatch(this.coords, this.destination)) {
            return;
        }
        this.coords.x += (this.destination.x - this.coords.x) > 0 ? this.speed : -this.speed;
        this.coords.y += (this.destination.y - this.coords.y) > 0 ? this.speed : -this.speed;
        console.log(this.coords);
    }
    move(dest) {
        this.destination = dest;
    }
}

class Rabbit extends BaseAnimal {
    constructor() {
        super(...arguments);
        this.speed = 0.5;
        this.image = '🐇';
    }
}

class Herb extends Entity {
    constructor() {
        super(...arguments);
        this.image = '🌿';
    }
}

class Shamrock extends Entity {
    constructor() {
        super(...arguments);
        this.image = '☘️';
    }
}

class SheafOfRise extends Entity {
    constructor() {
        super(...arguments);
        this.image = '🌾';
    }
}

const canvas = document.querySelector('#canvas');
canvas.height = canvas.clientHeight;
canvas.width = canvas.clientWidth;
const rabbit = new Rabbit();
const grass = [
    ...Array.from({ length: 20 }).map(() => new SheafOfRise(randomCoords(canvas.clientHeight))),
    ...Array.from({ length: 20 }).map(() => new Shamrock(randomCoords(canvas.clientHeight))),
    ...Array.from({ length: 20 }).map(() => new Herb(randomCoords(canvas.clientHeight))),
];
const animals = [rabbit];
const entities = [...grass, ...animals];
requestAnimationFrame(draw);
run();
function run() {
    setTimeout(() => {
        rabbit.move(randomCoords(canvas.clientHeight));
        run();
    }, (1 - Math.random()) * 2000);
}
function draw() {
    const ctx = canvas.getContext('2d');
    ctx.globalCompositeOperation = 'destination-over';
    ctx.clearRect(0, 0, canvas.clientWidth, canvas.clientHeight);
    entities.forEach((entity) => { drawEntity(ctx, entity); });
    animals.forEach((entity) => { entity.tick(); });
    window.requestAnimationFrame(draw);
}
