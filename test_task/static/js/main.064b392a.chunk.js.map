{"version":3,"sources":["core/Attr.ts","components/Actions.tsx","core/Employee.ts","components/Alert.tsx","components/Employee/Actions.tsx","components/fields.tsx","components/Employee/Card.tsx","components/Employee/List.tsx","storage/Local.ts","store/Employees.ts","store/Base.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["DATA_TYPE","useStyles","makeStyles","theme","createStyles","root","margin","spacing","position","bottom","right","React","memo","onAdd","onDelete","onSave","onUpdate","addDisabled","deleteDisabled","saveDisabled","updateDisabled","classes","className","Fab","color","aria-label","onClick","disabled","BaseAttr","type","label","value","dataRange","isRequired","_value","observable","box","change","action","v","set","this","JSON","stringify","get","ser","parse","computed","Employee","attrs","id","generateID","reduce","acc","cur","Object","values","map","attr","serialize","from","e","console","error","deserialize","STR","SELECT","DATE","RADIO","BOOL","Math","random","title","body","isOpened","onOk","onCancel","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","autoFocus","observer","store","changesStored","getChecked","length","useState","isPopupOpened","setPopupOpen","Alert","restore","Actions","add","new","delete","Field","Component","FIELDS_TYPES","BoolField","FormControlLabel","control","Switch","checked","onChange","name","StrField","TextField","onInput","target","defaultValue","required","DateField","InputLabelProps","shrink","SelectField","Select","MenuItem","RadioField","RadioGroup","row","Radio","labelPlacement","marginTop","width","display","flexDirection","choosen","noValidate","autoComplete","flexBasis","maxWidth","backgroundColor","palette","background","paper","employees","getList","choosenID","List","ListItem","dense","selected","button","choose","ListItemIcon","Checkbox","check","edge","tabIndex","disableRipple","inputProps","ListItemText","primary","LS","key","entity","localStorage","setItem","getStored","getItem","instance","EmployeesStore","STORAGE_KEY","Set","isChecked","serialized","entries","data","replace","Array","has","employee","toJS","Map","item","ids","forEach","bind","getInstance","isActual","drawer","breakpoints","up","flexShrink","menuButton","marginRight","drawerPaper","content","flexGrow","padding","ResponsiveDrawer","props","window","useTheme","mobileOpen","setMobileOpen","container","undefined","document","employeeStore","useEffect","Hidden","smUp","implementation","Drawer","variant","anchor","direction","ModalProps","keepMounted","xsDown","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.064b392a.chunk.js","sourcesContent":["import { action, computed, observable } from 'mobx';\r\nimport { ISerializable } from 'src/core/Serialize';\r\n\r\nexport class BaseAttr<T = any> implements ISerializable {\r\n   private _value = observable.box<T>();\r\n\r\n   constructor(\r\n      readonly type: DATA_TYPE,\r\n      /** Наименование атрибута */\r\n      public label: string,\r\n      value: T,\r\n      public dataRange: T[] = [],\r\n      public isRequired: boolean = false\r\n   ) {\r\n      this.change(value);\r\n   }\r\n\r\n   change = action((v: T) => {\r\n      this._value.set(v);\r\n   });\r\n\r\n   @computed get value(): T {\r\n      return this._value.get();\r\n   }\r\n\r\n   serialize() {\r\n      return JSON.stringify({\r\n         type: this.type,\r\n         label: this.label,\r\n         value: this.value,\r\n         dataRange: this.dataRange,\r\n         isRequired: this.isRequired\r\n      } as IProps<T>);\r\n   }\r\n\r\n   static from<T>(ser: string) {\r\n      const { label, value, dataRange, isRequired, type } = JSON.parse(ser) as IProps<T>;\r\n      return new BaseAttr(type, label, value, dataRange, isRequired);\r\n   }\r\n}\r\n\r\ntype IProps<T> = {\r\n   type: DATA_TYPE,\r\n   label: string,\r\n   value: T,\r\n   dataRange: T[],\r\n   isRequired: boolean;\r\n};\r\n\r\n\r\nexport enum DATA_TYPE {\r\n   STR,\r\n   DATE,\r\n   RADIO,\r\n   BOOL,\r\n   SELECT,\r\n}","import Fab from '@material-ui/core/Fab';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UpdateIcon from '@material-ui/icons/Update';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n   createStyles({\r\n      root: {\r\n         '& > *': {\r\n            margin: theme.spacing(1),\r\n         },\r\n         position: 'fixed',\r\n         bottom: theme.spacing(1),\r\n         right: theme.spacing(1),\r\n      },\r\n   }),\r\n);\r\n\r\nexport default React.memo(({\r\n   onAdd, onDelete, onSave, onUpdate,\r\n   addDisabled, deleteDisabled, saveDisabled, updateDisabled\r\n}: IHanders & Partial<IButtonAttrs>) => {\r\n   const classes = useStyles();\r\n   return (\r\n      <div className={classes.root}>\r\n         <Fab color=\"primary\" aria-label=\"add\" onClick={onAdd} disabled={addDisabled}>\r\n            <AddIcon />\r\n         </Fab>\r\n         <Fab aria-label=\"edit\" onClick={onDelete} disabled={deleteDisabled}>\r\n            <DeleteOutlineIcon />\r\n         </Fab>\r\n         <Fab aria-label=\"edit\" onClick={onSave} disabled={saveDisabled}>\r\n            <SaveIcon />\r\n         </Fab>\r\n         <Fab aria-label=\"edit\" onClick={onUpdate} disabled={updateDisabled}>\r\n            <UpdateIcon />\r\n         </Fab>\r\n      </div>\r\n   );\r\n});\r\n\r\ninterface IHanders {\r\n   onAdd: () => void;\r\n   onSave: () => void;\r\n   onUpdate: () => void;\r\n   onDelete: () => void;\r\n}\r\n\r\ninterface IButtonAttrs {\r\n   addDisabled: boolean;\r\n   deleteDisabled: boolean;\r\n   saveDisabled: boolean;\r\n   updateDisabled: boolean;\r\n}","import { BaseAttr, DATA_TYPE } from 'src/core/Attr';\r\nimport { ISerializable } from 'src/core/Serialize';\r\n\r\nexport default class Employee implements ISerializable {\r\n\r\n   readonly attrs: IAttrs;\r\n   constructor(attrs: BaseAttr[] = [], readonly id: EmployeeID = generateID()) {\r\n      this.attrs = attrs.reduce<IAttrs>((acc, cur) => { acc[cur.label] = cur; return acc; }, {});\r\n   };\r\n\r\n   serialize() {\r\n      return JSON.stringify({ id: this.id, attrs: Object.values(this.attrs).map((attr) => attr.serialize()) });\r\n   }\r\n\r\n   deserialize(ser: string) {\r\n      try {\r\n         const { id, attrs } = JSON.parse(ser) as { id: EmployeeID, attrs: string[]; };\r\n         return new Employee(attrs.map(BaseAttr.from), id);\r\n      } catch (e) {\r\n         console.error(e);\r\n      }\r\n   }\r\n\r\n   static from(ser: string) {\r\n      return new Employee().deserialize(ser);\r\n   }\r\n\r\n   static new() {\r\n      const required = true;\r\n      return new Employee([\r\n         new BaseAttr<string>(DATA_TYPE.STR, 'ФИО', 'Без имени', [], required),\r\n         new BaseAttr<string>(DATA_TYPE.SELECT, 'Должность', 'Без должности', ['Без должности', 'Гендир', 'Не Гендир'], required),\r\n         new BaseAttr<string>(DATA_TYPE.DATE, 'Дата рождения', ''),\r\n         new BaseAttr<'М' | 'Ж'>(DATA_TYPE.RADIO, 'Пол', 'М', ['М', 'Ж']),\r\n         new BaseAttr<boolean>(DATA_TYPE.BOOL, 'Уволен', false),\r\n      ]);\r\n   }\r\n\r\n\r\n}\r\n\r\nconst generateID = (): EmployeeID => `${Math.random()}`;\r\n\r\ntype IAttrs = Record<string, BaseAttr>;\r\nexport type EmployeeID = string;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default React.memo(({ title, body, isOpened, onOk, onCancel }: IProps) => (\r\n   <div>\r\n      <Dialog\r\n         open={isOpened}\r\n         onClose={onCancel}\r\n         aria-labelledby=\"alert-dialog-title\"\r\n         aria-describedby=\"alert-dialog-description\">\r\n         <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n         <DialogContent>\r\n            <DialogContentText> {body} </DialogContentText>\r\n         </DialogContent>\r\n         <DialogActions>\r\n            <Button onClick={onCancel} color=\"primary\" > cancel </Button>\r\n            <Button onClick={onOk} color=\"primary\" autoFocus> agree </Button>\r\n         </DialogActions>\r\n      </Dialog>\r\n   </div>\r\n));\r\n\r\ninterface IProps {\r\n   title: string,\r\n   body?: string,\r\n   isOpened: boolean;\r\n   onOk: () => void;\r\n   onCancel?: () => void;\r\n}","import EmployeesStore from 'src/store/Employees';\r\nimport Actions from 'src/components/Actions';\r\nimport Employee from 'src/core/Employee';\r\nimport Alert from 'src/components/Alert';\r\nimport React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function EmployeeActions({ store }: { store: EmployeesStore; }) {\r\n   const onAdd = () => { store.add(Employee.new()); };\r\n   const onDelete = () => {\r\n      store.delete(store.getChecked());\r\n   };\r\n   const onUpdate = () => {\r\n      if (!store.changesStored) { setPopupOpen(true); }\r\n   };\r\n   const onSave = store.store;\r\n   const saveDisabled = store.changesStored;\r\n   const deleteDisabled = store.getChecked().length === 0;\r\n\r\n   const [isPopupOpened, setPopupOpen] = React.useState<boolean>(false);\r\n   const onAgree = () => { setPopupOpen(false); store.restore(); };\r\n   const onCancel = () => { setPopupOpen(false); };\r\n   return <>\r\n      <Alert isOpened={isPopupOpened} onOk={onAgree} onCancel={onCancel} title={'Unsaved changes will be lost'} />\r\n      <Actions {...{ onAdd, onDelete, onUpdate, onSave, saveDisabled, deleteDisabled }} />\r\n   </>;\r\n})","import { Switch, TextField } from '@material-ui/core';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { BaseAttr, DATA_TYPE } from 'src/core/Attr';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nexport const Field = ({ attr }: { attr: BaseAttr; }) => {\r\n   const Component = FIELDS_TYPES[attr.type];\r\n   return <Component attr={attr} key={attr.label} />;\r\n};\r\n\r\nexport const BoolField = observer(({ attr }: { attr: BaseAttr; }) => (\r\n   <FormControlLabel\r\n      label={attr.label}\r\n      control={<Switch\r\n         key={attr.label}\r\n         checked={attr.value}\r\n         onChange={() => { attr.change(!attr.value); }}\r\n         name={attr.label}\r\n      />}\r\n   />\r\n));\r\n\r\nexport const StrField = observer(({ attr }: { attr: BaseAttr; }) => (\r\n   <TextField\r\n      key={attr.label}\r\n      onInput={({ target }) => { attr.change((target as HTMLInputElement).value); }}\r\n      label={attr.label}\r\n      defaultValue={attr.value}\r\n      required={attr.isRequired}\r\n   />\r\n));\r\n\r\nexport const DateField = observer(({ attr }: { attr: BaseAttr; }) => (\r\n   <TextField\r\n      key={attr.label}\r\n      label={attr.label}\r\n      type=\"date\"\r\n      onChange={({ target }) => {\r\n         attr.change((target as HTMLInputElement).value);\r\n      }}\r\n      required={attr.isRequired}\r\n      defaultValue={attr.value}\r\n      InputLabelProps={{ shrink: true, }}\r\n   />\r\n));\r\n\r\nexport const SelectField = observer(({ attr }: { attr: BaseAttr; }) => (\r\n   <Select\r\n      key={attr.label}\r\n      value={attr.value}\r\n      onChange={({ target }) => {\r\n         attr.change((target as HTMLSelectElement).value);\r\n      }}\r\n   >\r\n      {attr.dataRange.map((v) => <MenuItem value={v}>{v}</MenuItem>)}\r\n   </Select>\r\n));\r\n\r\nexport const RadioField = observer(({ attr }: { attr: BaseAttr; }) => (\r\n   <RadioGroup row\r\n      key={attr.label}\r\n      value={attr.value}\r\n      onChange={({ target }) => { attr.change((target as HTMLInputElement).value); }}\r\n   >\r\n      {attr.dataRange.map((v) =>\r\n         <FormControlLabel\r\n            value={v}\r\n            label={v}\r\n            control={<Radio />}\r\n            labelPlacement=\"start\"\r\n         />)}\r\n   </RadioGroup>\r\n));\r\n\r\nexport const FIELDS_TYPES = {\r\n   [DATA_TYPE.BOOL]: BoolField,\r\n   [DATA_TYPE.DATE]: DateField,\r\n   [DATA_TYPE.STR]: StrField,\r\n   [DATA_TYPE.SELECT]: SelectField,\r\n   [DATA_TYPE.RADIO]: RadioField,\r\n};","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { observer } from 'mobx-react-lite';\r\nimport EmployeesStore from 'src/store/Employees';\r\nimport { Field } from 'src/components/fields';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n   createStyles({\r\n      root: {\r\n         '& > div': {\r\n            marginTop: theme.spacing(2),\r\n         },\r\n         width: '40ch',\r\n         display: 'flex',\r\n         flexDirection: 'column'\r\n      },\r\n   }),\r\n);\r\n\r\nexport default observer(({ store }: { store: EmployeesStore; }) => {\r\n   const classes = useStyles();\r\n   if (!store.choosen) { return null; }\r\n   const attrs = Object.values(store.choosen.attrs);\r\n\r\n   return <form className={classes.root} noValidate autoComplete=\"off\">\r\n      {attrs.map((attr) => <Field attr={attr} key={attr.label} />)}\r\n   </form>;\r\n});\r\n","import Checkbox from '@material-ui/core/Checkbox';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from 'react';\r\nimport EmployeesStore from 'src/store/Employees';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n   createStyles({\r\n      root: {\r\n         flexBasis: '40%',\r\n         maxWidth: 360,\r\n         backgroundColor: theme.palette.background.paper,\r\n      },\r\n   }),\r\n);\r\n\r\nexport default observer(({ store }: IProps) => {\r\n   const employees = store.getList();\r\n   const classes = useStyles();\r\n   const choosenID = store.choosen?.id;\r\n   return <List className={classes.root}>\r\n      {employees.map(({ label, id, checked }) => (\r\n         <ListItem key={id} dense selected={id === choosenID} button onClick={() => {\r\n            store.choose(id);\r\n         }}>\r\n            <ListItemIcon>\r\n               <Checkbox\r\n                  onChange={() => { store.check(id, !checked); }}\r\n                  edge=\"start\"\r\n                  checked={checked}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{ 'aria-labelledby': id }}\r\n               />\r\n            </ListItemIcon>\r\n            <ListItemText id={id} primary={label} />\r\n         </ListItem>\r\n      ))}\r\n   </List>;\r\n});\r\n\r\ninterface IProps {\r\n   store: EmployeesStore;\r\n}","import { IDeserializable, ISerializable } from 'src/core/Serialize';\r\n\r\nexport default class LS {\r\n   store(key: string, entity: ISerializable) {\r\n      localStorage && localStorage.setItem(key, entity.serialize());\r\n   }\r\n\r\n   restore(key: string, entity: IDeserializable): void {\r\n      const ser = this.getStored(key);\r\n      if (!ser) { return; }\r\n      entity.deserialize(ser);\r\n   }\r\n\r\n   isActual(key: string, entity: ISerializable): boolean {\r\n      return this.getStored(key) === entity.serialize();\r\n   }\r\n\r\n   private getStored(key: string) {\r\n      return localStorage && localStorage.getItem(key);\r\n   }\r\n\r\n   private static instance: LS;\r\n\r\n   static getInstance(): LS {\r\n      return this.instance || (this.instance = new LS());\r\n   }\r\n}","import { action, computed, observable, toJS } from 'mobx';\r\nimport Employee, { EmployeeID } from 'src/core/Employee';\r\nimport BaseStore from 'src/store/Base';\r\n\r\nexport default class EmployeesStore extends BaseStore<Employee>{\r\n   protected STORAGE_KEY = 'EmployeesStore';\r\n\r\n   private checked: Set<EmployeeID> = observable.set(new Set());\r\n   private choosenID = observable.box<EmployeeID>('');\r\n\r\n   check = action((id: EmployeeID, isChecked: boolean) => {\r\n      isChecked ? this.checked.add(id) : this.checked.delete(id);\r\n   });\r\n\r\n   @computed getChecked(): EmployeeID[] {\r\n      return Array.from(this.checked.values());\r\n   }\r\n\r\n   choose = action((id: EmployeeID) => {\r\n      this.choosenID.set(id);\r\n   });\r\n\r\n   @computed get choosen(): Employee | undefined {\r\n      const employee = this.data.get(this.choosenID.get());\r\n      if (!employee) { return void 0; }\r\n      return toJS<Employee>(employee);\r\n   }\r\n\r\n   deserialize = action((serialized: string) => {\r\n      try {\r\n         const entries = (JSON.parse(serialized) as [string, string][])\r\n            .map(([id, ser]) => [id, Employee.from(ser)]);\r\n         this.data.replace(entries);\r\n      } catch (e) {\r\n         console.error('Ошибка десериализации', e);\r\n      }\r\n   });\r\n\r\n   getList(): { id: string, label: string; checked: boolean; }[] {\r\n      return Array.from(this.data.values())\r\n         .map(({ id, attrs }) => ({\r\n            label: attrs['ФИО'].value,\r\n            checked: this.checked.has(id),\r\n            id,\r\n         }));\r\n   }\r\n\r\n   private static instance: EmployeesStore;\r\n   static getInstance(): EmployeesStore {\r\n      return this.instance || (this.instance = new EmployeesStore());\r\n   }\r\n}\r\n","import { action, computed, observable, ObservableMap } from 'mobx';\r\nimport { ISerializable } from 'src/core/Serialize';\r\nimport LS from 'src/storage/Local';\r\n\r\n\r\nexport default class BaseStore<T extends { id: string; } & ISerializable> implements ISerializable {\r\n   protected data: ObservableMap<string, T> = observable.map(new Map());\r\n   protected STORAGE_KEY = 'BaseStore';\r\n\r\n   constructor() {\r\n      this.store = this.store.bind(this);\r\n      this.restore = this.restore.bind(this);\r\n   }\r\n\r\n   add = action((item: T): void => {\r\n      this.data.set(item.id, item);\r\n   });\r\n\r\n   delete = action((ids: string[]) => {\r\n      ids.forEach((id) => { this.data.delete(id); });\r\n   });\r\n\r\n   getAll(): [string, T][] {\r\n      return Array.from(this.data.entries());\r\n   }\r\n\r\n   serialize() {\r\n      const entries = Array.from(this.data.entries()).map(([id, entity]) => [id, entity.serialize()]);\r\n      return JSON.stringify(entries);\r\n   }\r\n\r\n   deserialize = action((serialized: string) => {\r\n      try {\r\n         const entries = JSON.parse(serialized);\r\n         this.data.replace(entries);\r\n      } catch (e) {\r\n         console.error('Ошибка десериализации', e);\r\n      }\r\n   });\r\n\r\n   @computed get changesStored(): boolean {\r\n      return LS.getInstance().isActual(this.STORAGE_KEY, this);\r\n   }\r\n\r\n   store() {\r\n      LS.getInstance().store(this.STORAGE_KEY, this);\r\n   }\r\n\r\n   restore() {\r\n      LS.getInstance().restore(this.STORAGE_KEY, this);\r\n   }\r\n}\r\n","import Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport React, { useEffect } from 'react';\nimport EmployeeActions from 'src/components/Employee/Actions';\nimport EmployeeCard from 'src/components/Employee/Card';\nimport EmploeeList from 'src/components/Employee/List';\nimport EmployeesStore from 'src/store/Employees';\n\nconst drawerWidth = 400;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('sm')]: {\n        width: drawerWidth,\n        flexShrink: 0,\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n  }),\n);\n\ninterface Props {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window?: () => Window;\n}\n\nexport default function ResponsiveDrawer(props: Props) {\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  const employeeStore = EmployeesStore.getInstance();\n\n  useEffect(() => {\n    employeeStore.restore();\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            <EmploeeList store={employeeStore} />\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{ paper: classes.drawerPaper }}\n            variant=\"permanent\"\n            open>\n            <EmploeeList store={employeeStore} />\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <EmployeeCard store={employeeStore} />\n      </main>\n      <EmployeeActions store={employeeStore} />\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'src/components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}